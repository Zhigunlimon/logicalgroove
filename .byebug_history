continue
exit
 Rails.cache.write key, value_str
exit
ConfigSetting.create(:key => value.class.to_s, value: "ss@ss.com")
ConfigSetting.create(value: "ss@ss.com")
obj
exit
self.value.class.to_s
self.value_class
self.value.class.to_s != self.value_class
self.value_class
self
exit
a.map { |p| p + (a.index(p)+1).to_s }.join(' ')
a.map { |p| (p + (a.index(p)+1).to_s).to_s }.join(',')
a.map { |p| (p + (a.index(p)+1).to_s).to_s }
a.map { |p| (p + (a.index(p)+1).to_s).to_S }
a.map { |p| p + (a.index(p)+1).to_s }.to_s
a.map { |p| p + (a.index(p)+1).to_s }
a.map { |p| p + (a.index(p)+q).to_s }
a.map { |p| p + a.index(p)+1.to_s }
a.map { |p| p + a.index(p).to_s }
a.map { |p| p + a.count(p).to_s }
"ss"+ 1.to_s
"ss"+ "1"
"ss"+ 1
a.map { |p| p + p.index }
a.map { |p| p + a.count(p) }
a.map { |p| p + "a.count(p)" }
a.detect { |p| p + "a.count(p)" }
a.detect { |p| p + a.count(p) }
string.detect { |p| p + string.count(p) }
a.each do |p,i| p + 1, i+=1 end
a = string.split
string.split
string.chars
string.charse
string = "The quick brown fox jumps over the lazy dog"
string_arr.detect { |p| string_arr.count(p) == 1 }
string_arr = string.gsub(" ", "").chars
string  = "this is pretty neat"
array.each do |i| puts i end
array
array.length.times do |i| puts i end
array.length.times do | i |
arrayarray.length.times do | i |
array.each do puts()
array.each do puts
array.each
array.map { |e| puts(e) }
array = [1,2,3,4,5,6]
a.gsub(' ','').downcase.chars.sort
b.gsub(' ','').downcase.chars.sort
b = "bad credit"
a ="debit card" 
b.gsub(' ','').downcase.chars.sort
a.gsub(' ','').downcase.chars.sort
a..gsub(' ','').downcase.chars.sort
b = "silent"
a = "listen"
a = string.gsub(" ", "").chars
string  = "this is pretty neat"
a.detect{ |e| a.count(e) == 1 }
a = string.chars
string  = "this is pretty neat"
a.detect{ |e| a.count(e) = 1 }
a.detect{ |e| a.count(e) > 1 }
a = string.chars
string  = "this is pretty neat"
a.first
a.map {|p| puts p.count.value} 
a = string.chars
string  = "this is pretty neat"
a.first.uniq
a.uniq?
a.uniq
a.uniq.first 
a.map {|p| puts p.count} 
a.map {|p| puts p} 
a = string.chars
a = string.char
string  = "this is pretty neat"
continue
self
ConfigSetting.all
continue
self
self.value_class
@return_val
ConfigSetting.all
continue
ConfigSetting.all
continue
ConfigSetting.all
continue
ConfigSetting.all
continue
exit
ConfigSetting.all
ConfigSetting.create(value: true)
ConfigSetting.new(value: true)
ConfigSetting.new (value: True)
ConfigSetting.new (value: true)
self
@return_val
continue
self.create
self
self.value_class
ConfigSetting.all
@return_val
ConfigSetting.all
 @return_val = value_str
ConfigSetting.all
@return_val = obj
ConfigSetting.all
write_attribute(:value_str, obj)
obj
Rails.cache.fetch(obj) 
Rails.cache (value_str: obj) 
Rails.cache (:value_str, obj) 
Rails.cache {value_str: obj } 
Rails.cache {:value_str, obj } 
obj
:value_str
self.value_class = obj.class.to_s
obj
exit
ConfigSetting.all
continue
ConfigSetting.all
continue
exit
self.value_class
@return_val
exit
self.value_class
self.value_str
@return_val
return_val
